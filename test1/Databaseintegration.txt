https://www.toptal.com/django/django-top-10-mistakes

Postgres Setup in Django Step by step help


Remember to join the static fies in media root

CREATE DATABASE DB_NAME WITH PASSWORD 'password';

ALTER ROLE service_on_call SET client_encoding TO 'utf8';
ALTER ROLE service_on_call SET default_transaction_isolation TO 'read committed';
ALTER ROLE service_on_call SET timezone TO 'UTC';


AIzaSyCxKD5cjuV3XpEdKILj0a_XnW4GIfiIqD4

GRANT ALL PRIVILEGES ON DATABASE soc TO service_on_call;

# changes to be mad ein settings.py in order to establish connection with postgres
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'soc',
        'USER': 'service_on_call',
        'PASSWORD': 'On_call@123',
        'HOST': 'localhost',
        'PORT': '',
    }
}

import json, urllib
from urllib import urlencode
import googlemaps
start = "Bridgewater, Sa, Australia"
finish = "Stirling, SA, Australia"

url = 'http://maps.googleapis.com/maps/api/directions/json?%s' % urlencode((
            ('origin', start),
            ('destination', finish)
 ))
ur = urllib.urlopen(url)
result = json.load(ur)

for i in range (0, len (result['routes'][0]['legs'][0]['steps'])):
    j = result['routes'][0]['legs'][0]['steps'][i]['html_instructions'] 
    print j



https://developers.google.com/maps/documentation/javascript/directions

https://github.com/googlemaps/google-maps-services-python

https://developers.google.com/maps/documentation/directions/client-library



https://developers.google.com/maps/documentation/javascript/tutorial


Most Important in case of Js in maps
https://developers.google.com/maps/documentation/javascript/tutorial


https://youtu.be/21PDd17dnnI 
{sensor value for live tracking}

1: World
5: Landmass/continent
10: City
15: Streets
20: Buildings


Marker Function
var marker = new google.maps.Marker({
    position: myLatLng,
    title:'Helllo World'
})
marker.setMap(map)



https://www.youtube.com/watch?v=McCbYGF-osE&list=PLgCYzUzKIBE-SZUrVOsbYMzH7tPigT3gi&index=2

https://developers.google.com/maps/documentation/javascript/custom-markers


https://www.codexworld.com/google-maps-dynamic-custom-marker-icons-with-php-mysql-database/



from django.db import models

class Person(models.Model):
    SHIRT_SIZES = (
        ('S', 'Small'),
        ('M', 'Medium'),
        ('L', 'Large'),
    )
    name = models.CharField(max_length=60)
    shirt_size = models.CharField(max_length=1, choices=SHIRT_SIZES)


    Django's html output is often "enhanced" with javascript in some way, often using jQuery or just vanilla JS, to improve UX in such a way that we don't always have to fetch a new entire HTML page from the server
Pretty much yes
jQuery comes with a neat AJAX API to send requests to the server and you can get back html to inject/replace in the page on the fly

from django.apps import AppConfig
from django.utils.translation import ugettext_lazy as _

class SOCConfig(AppConfig):
    name = 'SOC'
    verbose_name = _('the name u want')

class ExampleModel(models.Model):
    id = models.CharField(max_length=100, primary_key=True)
    name = models.CharField('u could also change this name if u want', max_length=45, null=True, blank =True)

    class Meta:
        verbose_name = 'the name u want'
        verbose_name_plural = 'the name u want'


https://djangocentral.com/creating-comments-system-with-django/  
This above is the perfect example for class view

API Geting Started 
https://sunscrapers.com/blog/ultimate-tutorial-django-rest-framework-part-1/
